variables:
  IMAGE_DOCKER: gcr.io/kaniko-project/executor:debug
  IMAGE_PYTHON: python:3.11.7-slim-bookworm
  IMAGE_HELM: alpine/helm:3.13.2
  GIT_STRATEGY: clone
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  VENV_DIR: "$CI_PROJECT_DIR/.venv"

  REGISTRY_REPOSITORY: $REGISTRY_URL/manga/$CI_PROJECT_NAME

default:
  image: $IMAGE_PYTHON

stages:
  - lint
  - build
  - deploy

.dependencies-cache: &dependencies-cache
  - key:
      files:
        - pdm.lock
    paths:
      - $VENV_DIR
    policy: ${CACHE_POLICY}
  - key: $CI_COMMIT_REF_SLUG
    paths:
      - $PIP_CACHE_DIR
    policy: ${CACHE_POLICY}

.setup:
  interruptible: true
  before_script:
    - apt -y update && apt -y --no-install-recommends install git curl
    - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
    - task --version
    - python -V
    - pip install pdm
  variables:
    CACHE_POLICY: "pull-push"
  cache:
    - *dependencies-cache
  only:
    changes:
      - "**/*.py"
      - pdm.lock
      - pyproject.toml
#      - .gitlab-ci.yml
      - Taskfile.yml

.lint-job:
  extends: .setup
  stage: lint
  needs:
    - install-dependencies
  before_script:
    - !reference [.setup, before_script]
  variables:
    GIT_STRATEGY: clone
    CACHE_POLICY: "pull"
    RUNNER: "pdm run"
  tags:
    - manga
    - k8s
    - shared

install-dependencies:
  extends: .setup
  stage: lint
  script:
    - pdm sync -G:all --clean
    - pdm list
  tags:
    - manga
    - k8s
    - shared

typecheck:
  extends: .lint-job
  script:
    - task typecheck

lint:
  extends: .lint-job
  script:
    - task lint

deptry:
  extends: .lint-job
  script:
    - task deptry

test:
  extends: .lint-job
  variables:
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_TEST_URL: "postgresql+asyncpg://postgres:password@postgres/postgres"
    DATABASE_NAME: ""
    DATABASE_HOST: ""
    DATABASE_USERNAME: ""
    DATABASE_PASSWORD: ""

    S3_PUBLIC_URL: "http://s3.example"
    S3_ENDPOINT_URL: ""
    S3_ACCESS_KEY: ""
    S3_SECRET_KEY: ""

    AUTH_PUBLIC_KEY: |
      -----BEGIN PUBLIC KEY-----
      MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDD+kP/va1niViA4a1N+cIUBTa9
      UXdTDQ0c+b3h/Et6Ix9LjGM9lBnG79LoGtDeKa/2jV88dOn7sJaWU7FCU7AF+fHk
      9bv7waqsr3BzY2FbvuQUqmp+5yplnKRGNQisBmOl15DYsb37QQvuNU+neiB60lu0
      efih1032Z0EViiCxWwIDAQAB
      -----END PUBLIC KEY-----
    AUTH_PRIVATE_KEY: |
      -----BEGIN PRIVATE KEY-----
      MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMP6Q/+9rWeJWIDh
      rU35whQFNr1Rd1MNDRz5veH8S3ojH0uMYz2UGcbv0uga0N4pr/aNXzx06fuwlpZT
      sUJTsAX58eT1u/vBqqyvcHNjYVu+5BSqan7nKmWcpEY1CKwGY6XXkNixvftBC+41
      T6d6IHrSW7R5+KHXTfZnQRWKILFbAgMBAAECgYA4PsZvSofO9EszShHMFEdQKaLp
      OM1PR6qgy0hk6FzdI+FidFszHCM9xiy4sqGJcVtwHmjb2A4jTy4Y3NI93/jfbVkJ
      s/vAwWdpNpLdfU5EH056Bkyr4LeXHgyodVHXe5Vzp/tc3bDj9VJ3GZWTh/s79kgi
      5RAcWyrEBrOXGJrC8QJBAPAHs3ukcD4+tP/lrfYOb2ZKMjIQwmalmC0y1yFRDlrg
      HiY/bOaOrSZN4bYFwawuNC6v/TZdZsC8XiuVPt1VTvkCQQDRBD46zAKd5FSXWupx
      /uLaDlvdggjdg1I5bRJV2Luib7yzHUgCzPXZ3nMeqJIel4IcN7mIydrNvLzB4ETc
      7FPzAkEA6ty+NFc8NMuq01FrnH2XZyFmaDKZ5VJWyrMaaVEkmKr/FTGuXxJwPjCq
      kC6lyNIU4TH2s8FEj4ZBJqgMMQoOEQJAJAn7QOAUQ20vOLmwWt979eUr6dGV/bu6
      3bP0yWCJWcSyYJ/X3sPAUESOzOZ761JsWLkzAGbtlzPHyBYHSaBmCQJAVZqnKsBB
      rF75x7Mdv+KC2Q3bTDINQ9w50i3olzkme8TFXFV2Zdim115bXXRYVOmXz5YF7sLO
      Bke+IZK0VZQtig==
      -----END PRIVATE KEY-----

  services:
    - name: groonga/pgroonga:3.1.7-alpine-16-slim
      alias: postgres

  allow_failure: true
  script:
    - task testcov
  coverage: "/^TOTAL.*\\s(\\d*.?\\d*)/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build-image:
  stage: build
  image:
    name: $IMAGE_DOCKER
#    entrypoint: []

  variables:
    RUNTIME_IMAGE: $REGISTRY_REPOSITORY:$CI_COMMIT_SHORT_SHA
    GODEBUG: "http2client=0"

  script:
    - echo "{\"auths\":{\"$REGISTRY_URL\":{\"username\":\"$REGISTRY_USERNAME\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/dockerfile
      --build-arg "PYTHON_IMAGE=$IMAGE_PYTHON"
      --snapshot-mode=redo
      --cache=true
      --cache-repo=$REGISTRY_REPOSITORY
      --skip-tls-verify-registry $REGISTRY_URL
      --destination=$RUNTIME_IMAGE
  only:
    - dev
    - main
  tags:
    - manga
    - k8s
    - shared

.deploy:
  image: $IMAGE_HELM
  stage: deploy
  variables:
    APP_NAME: "manga"
  script:
    - >
      helm upgrade $APP_NAME ./.k8s/app
      --install
      --namespace $NAMESPACE
      --set image.repository=$REGISTRY_REPOSITORY,image.tag="$CI_COMMIT_SHORT_SHA"
      -f ./.k8s/app/values.yaml
      -f ./.k8s/app/values.$VALUES_FILE.yaml
  when: manual
  tags:
    - deployment
    - k8s
    - home
  only:
    - main


deploy-production:
  extends: .deploy
  variables:
    NAMESPACE: "manga"
    VALUES_FILE: "production"
  environment:
    name: "production"
    url: "https://graphql-manga.dpy.su/"
    deployment_tier: "production"
