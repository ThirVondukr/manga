directive @isAuthenticated on FIELD_DEFINITION

type AltTitle {
  id: ID!
  language: LanguageEnum!
  title: String!
}

union ChapterCreateError = ValidationErrors | FileUploadError | RelationshipNotFoundError | PermissionDeniedError | EntityAlreadyExistsError

input ChapterCreateInput {
  title: String!
  volume: Int
  number: [Int!]!
  branchId: ID!
}

type ChapterCreatePayload {
  chapter: MangaChapter
  error: ChapterCreateError
}

type ChapterMutationGQL {
  create(pages: [Upload!]!, input: ChapterCreateInput!): ChapterCreatePayload! @isAuthenticated
}

"""Date with time (isoformat)"""
scalar DateTime

type EntityAlreadyExistsError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type FileUploadError implements Error {
  message: String!
}

type Group {
  id: ID!
  name: String!
}

union GroupCreateError = ValidationErrors | EntityAlreadyExistsError

input GroupCreateInput {
  name: String!
}

type GroupCreatePayload {
  group: Group
  error: GroupCreateError
}

type GroupMutations {
  create(input: GroupCreateInput!): GroupCreatePayload! @isAuthenticated
}

type Image {
  id: ID!
  width: Int!
  height: Int!
  url: String!
}

type ImageSet {
  id: ID!
  original: Image!
  alternatives: [Image!]!
}

enum LanguageEnum {
  ENG
  JPN
  UKR
}

type Manga {
  id: ID!
  title: String!
  titleSlug: String!
  description: String!
  status: MangaStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  bookmarkCount: Int!
  rating: Float!
  ratingCount: Int!
  tags: [MangaTag!]!
  chapters(pagination: PagePaginationInput = null): MangaChapterPagePaginationResult!
  altTitles: [AltTitle!]!
  commentCount: Int!
  bookmark: MangaBookmark @isAuthenticated
  arts: [MangaArt!]!
  coverArt: MangaArt
}

input MangaAddBookmarkInput {
  mangaId: ID!
  status: MangaBookmarkStatus!
}

type MangaArt {
  id: ID!
  volume: Int!
  language: LanguageEnum!
  image: ImageSet!
}

input MangaArtAddInput {
  image: Upload!
  volume: Int!
  language: LanguageEnum!
}

union MangaArtsAddError = PermissionDeniedError | NotFoundError | EntityAlreadyExistsError | FileUploadError | ValidationErrors

input MangaArtsAddInput {
  mangaId: ID!
  arts: [MangaArtAddInput!]!
}

type MangaArtsAddPayload {
  manga: Manga
  error: MangaArtsAddError
}

type MangaBookmark {
  id: ID!
  status: MangaBookmarkStatus!
  createdAt: DateTime!
  manga: Manga!
}

union MangaBookmarkError = NotFoundError | ValidationErrors

type MangaBookmarkPagePaginationResult {
  items: [MangaBookmark!]!
  pageInfo: PagePaginationInfo!
}

type MangaBookmarkPayload {
  manga: Manga
  error: MangaBookmarkError
}

enum MangaBookmarkStatus {
  PLAN_TO_READ
  READING
  COMPLETED
  DROPPED
}

type MangaBranch {
  id: ID!
  name: String!
  language: LanguageEnum!
}

union MangaBranchCreateError = ValidationErrors | RelationshipNotFoundError

input MangaBranchCreateInput {
  name: String!
  language: LanguageEnum!
  mangaId: ID!
  groupId: ID!
}

type MangaBranchCreatePayload {
  branch: MangaBranch
  error: MangaBranchCreateError
}

type MangaBranchMutationGQL {
  create(input: MangaBranchCreateInput!): MangaBranchCreatePayload! @isAuthenticated
}

type MangaChapter {
  id: ID!
  title: String!
  volume: Int
  number: String!
  pages: [MangaPage!]!
}

type MangaChapterPagePaginationResult {
  items: [MangaChapter!]!
  pageInfo: PagePaginationInfo!
}

union MangaCreateError = ValidationErrors | EntityAlreadyExistsError | PermissionDeniedError

input MangaCreateInput {
  title: String!
  description: String!
  status: MangaStatus!
}

type MangaCreatePayload {
  manga: Manga
  error: MangaCreateError
}

input MangaFilter {
  statuses: [MangaStatus!] = null
  searchTerm: String = null
  tags: MangaTagFilter = null
}

type MangaMutations {
  create(input: MangaCreateInput!): MangaCreatePayload! @isAuthenticated
  update(input: MangaUpdateInput!): MangaUpdatePayload! @isAuthenticated
  addBookmark(input: MangaAddBookmarkInput!): MangaBookmarkPayload! @isAuthenticated
  removeBookmark(id: ID!): MangaBookmarkPayload! @isAuthenticated
  addArts(input: MangaArtsAddInput!): MangaArtsAddPayload! @isAuthenticated
  setCoverArt(input: MangaSetCoverArtInput!): MangaSetCoverArtPayload! @isAuthenticated
  setRating(input: MangaSetRatingInput!): MangaSetRatingPayload! @isAuthenticated
}

type MangaPage {
  Id: UUID!
  id: ID!
  number: Int!
  image: ImageSet!
}

type MangaPagePaginationResult {
  items: [Manga!]!
  pageInfo: PagePaginationInfo!
}

type MangaRating {
  id: ID!
  value: Int!
}

union MangaSetCoverArtErrorGQL = NotFoundError | PermissionDeniedError | ValidationErrors

input MangaSetCoverArtInput {
  mangaId: ID!
  artId: ID
}

type MangaSetCoverArtPayload {
  manga: Manga
  error: MangaSetCoverArtErrorGQL
}

union MangaSetRatingError = NotFoundError | ValidationErrors

input MangaSetRatingInput {
  mangaId: ID!
  rating: Int!
}

type MangaSetRatingPayload {
  manga: Manga
  rating: MangaRating
  error: MangaSetRatingError
}

input MangaSort {
  field: MangaSortField! = TITLE
  direction: SortDirection! = ASC
}

enum MangaSortField {
  TITLE
  CREATED_AT
  CHAPTER_UPLOAD
}

enum MangaStatus {
  ONGOING
  COMPLETED
  CANCELLED
  ON_HOLD
}

type MangaTag {
  id: ID!
  name: String!
  slug: String!
  category: MangaTagCategory!
}

type MangaTagCategory {
  id: ID!
  name: String!
}

input MangaTagFilter {
  include: [ID!] = null
  exclude: [ID!] = null
}

union MangaUpdateError = ValidationErrors | EntityAlreadyExistsError | PermissionDeniedError | NotFoundError

input MangaUpdateInput {
  id: ID!
  title: String!
  description: String!
  status: MangaStatus!
}

type MangaUpdatePayload {
  manga: Manga
  error: MangaUpdateError
}

type Mutation {
  user: UserMutations!
  manga: MangaMutations!
  groups: GroupMutations!
  branches: MangaBranchMutationGQL!
  chapters: ChapterMutationGQL!
}

type NotFoundError implements Error {
  message: String!
  entityId: ID!
}

type PagePaginationInfo {
  currentPage: Int!
  pageSize: Int!
  totalItems: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalPages: Int!
}

input PagePaginationInput {
  page: Int! = 1
  pageSize: Int! = 100
}

type PermissionDeniedError implements Error {
  message: String!
}

type PrivateUser implements User {
  id: ID!
  username: String!
  joinedAt: DateTime!
  avatar: ImageSet
  email: String!
}

type Query {
  myBookmarks(pagination: PagePaginationInput = null): MangaBookmarkPagePaginationResult! @isAuthenticated
  chapter(id: ID!): MangaChapter
  manga(id: ID!): Manga
  mangas(pagination: PagePaginationInput = null, filter: MangaFilter = null, sort: MangaSort = null): MangaPagePaginationResult!
  tags: [MangaTag!]!
  me: PrivateUser! @isAuthenticated
}

type RelationshipNotFoundError implements Error {
  message: String!
  entityId: ID!
}

enum SortDirection {
  ASC
  DESC
}

scalar UUID

scalar Upload

interface User {
  id: ID!
  username: String!
  joinedAt: DateTime!
  avatar: ImageSet
}

union UserAvatarChangeError = FileUploadError

type UserAvatarChangePayload {
  user: PrivateUser
  error: UserAvatarChangeError
}

type UserMutations {
  changeAvatar(avatar: Upload!): UserAvatarChangePayload! @isAuthenticated
}

type ValidationError implements Error {
  message: String!
  code: String!
  location: [String!]!
}

type ValidationErrors implements Error {
  message: String!
  errors: [ValidationError!]!
}