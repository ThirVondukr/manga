type AuthMutations {
  signUp(input: SignUpInput!): SignUpPayload!
  signIn(input: SignInInput!): SignInPayload!
}

type AuthenticationResult {
  user: UserGQL!
  accessToken: String!
}

type EntityAlreadyExistsError implements Error {
  message: String!
}

interface Error {
  message: String!
}

type InvalidCredentialsError implements Error {
  message: String!
}

type Mutation {
  auth: AuthMutations!
}

type Query {
  helloWorld: String!
}

union SignInErrors = InvalidCredentialsError | ValidationErrors

input SignInInput {
  email: String!
  password: String!
}

type SignInPayload {
  result: AuthenticationResult
  error: SignInErrors
}

union SignUpErrors = EntityAlreadyExistsError | ValidationErrors

input SignUpInput {
  email: String!
  username: String!
  password: String!
}

type SignUpPayload {
  result: AuthenticationResult
  error: SignUpErrors
}

type UserGQL {
  id: ID!
  username: String!
}

type ValidationError implements Error {
  message: String!
  code: String!
  location: [String!]!
}

type ValidationErrors implements Error {
  message: String!
  errors: [ValidationError!]!
}