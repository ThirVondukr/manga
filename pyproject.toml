[project]
name = ""
version = "0.0.1"
description = ""
license = { text = "MIT" }
authors = [
    { name = "Doctor", email = "thirvondukr@gmail.com" },
]
requires-python = ">=3.11"
dependencies = [
    "Pillow>=10.3.0",
    "aioboto3>=12.4.0",
    "aiofiles>=23.2.1",
    "aioinject>=0.32.0",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "cryptography>=42.0.5",
    "fastapi>=0.110.1",
    "graphql-core>=3.2.3",
    "httptools>=0.6.1",
    "httpx>=0.27.0",
    "litestar>=2.8.2",
    "orjson>=3.10.1",
    "pydantic-core>=2.18.1",
    "pydantic-settings>=2.2.1",
    "pydantic[email]>=2.7.0",
    "pyjwt>=2.8.0",
    "python-dotenv>=1.0.1",
    "python-multipart>=0.0.9",
    "python-slugify>=8.0.4",
    "result>=0.16.1",
    "sentry-sdk>=1.45.0",
    "sqlalchemy>=2.0.29",
    "starlette>=0.37.2",
    "strawberry-graphql>=0.226.0",
    "types-aiobotocore-s3>=2.12.3",
    "uuid-utils>=0.6.1",
    "uvicorn>=0.29.0",
    "uvloop>=0.19.0; sys_platform != \"win32\"",
]
[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"


[tool.black]
line-length = 80

[tool.pdm]
[tool.pdm.dev-dependencies]
dev = [
    "aiofiles>=23.2.1",
    "black>=24.4.0",
    "deptry>=0.16.1",
    "faker>=24.11.0",
    "mypy>=1.9.0",
    "radon>=6.0.1",
    "ruff>=0.4.0",
    "ipython>=8.23.0",
]
graphql = [
    "libcst>=1.3.1",
    "rich>=13.7.1",
    "typer>=0.12.3",
]
testing = [
    "anyio>=4.3.0",
    "asgi-lifespan>=2.1.0",
    "coverage>=7.4.4",
    "factory-boy>=3.3.0",
    "freezegun>=1.4.0",
    "httpx>=0.27.0",
    "pytest-archon>=0.0.6",
    "pytest>=8.1.1",
    "sqlalchemy-pytest>=0.3.2.post1",
    "typeguard>=4.2.1",
]
types = [
    "types-aioboto3[s3]>=12.3.0",
    "types-aiofiles>=23.2.0.20240403",
    "types-passlib>=1.7.7.20240327",
    "types-Pillow>=10.2.0.20240406",
    "types-aiobotocore-s3>=2.12.3",
]

[tool.pdm.scripts]
lint = { composite = [
    "black .",
    "ruff . --fix",
    "black .",
    "deptry ./src",
    "mypy .",
] }
test = { composite = [
    "coverage run",
    "coverage report",
] }


[tool]
[tool.pytest.ini_options]
pythonpath = "src"
filterwarnings = [
    "ignore:Accessing argon2\\.__version__ is deprecated and will be removed in a future release\\. Use importlib\\.metadata directly to query for structlog's packaging metadata\\."
]

[tool.coverage.run]
source = ["src"]
omit = [
    "src/app/adapters/cli/*",
    "src/app/adapters/image_resizer/*",
    "src/app/core/domain/manga/import_/cbz.py",
    "src/app/core/storage.py",  # S3 Client
    "src/app/db/migrations/*",
    "src/lib/connectors/keycloak.py",  # Keycloak client
    "src/app/core/domain/auth/utils.py",
]
command_line = "-m pytest -vvv --reuse-db"
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "class .*\\(.*\\bProtocol\\b.*\\):",
    "@(?:typing\\.)?overload",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2
fail_under = 100


[tool.deptry]
exclude = ["src/app/adapters/cli/seed\\.py"]
[tool.deptry.per_rule_ignores]
DEP002 = [
    "asyncpg",  # SQLAlchemy
    "cryptography", # PyJWT
    "httptools",  # uvicorn
    "orjson",
    "python-multipart",  # fastapi
    "uvicorn",  # web server
    "uvloop",  # uvicorn
]

[tool.deptry.package_module_name_map]
uvloop = "uvloop"

[tool.mypy]
plugins = [
    "pydantic.mypy",
    "strawberry.ext.mypy_plugin",
]

strict = true
follow_imports = "normal"
ignore_missing_imports = false

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

pretty = true
show_column_numbers = true
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
fixable = [
    "F",
    "E",
    "W",
    "I",
    "COM",
    "UP",
    "RUF",
]
unfixable = [
    "F841", # Variable  is assigned to but never used
]
select = ["ALL"]
ignore = [
    "E501", # Line Length
    "ANN101",
    "ANN102",
    "D10", # Disable mandatory docstrings
    "D203", # one-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "PD", # pandas-vet
    "TCH001",
    "TCH002",
    "TCH003",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S311"]
"tests/*/test_*.py" = ["PLR0913", "FBT001"]
"src/app/alembic/*" = ["INP001"]
"src/app/db/migrations/versions/*" = ["D400", "D415", "INP001"]
"src/app/db/models/*" = ["A003"]
"src/app/*/schema.py" = ["A003"]
"src/lib/query_complexity.py" = ["ARG002"]
".scripts/*" = ["INP001"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "filter", "id"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"starlette.status".msg = "Use http.HTTPStatus instead."
"fastapi.status".msg = "Use http.HTTPStatus instead."
"litestar.status_codes".msg = "Use http.HTTPStatus instead."
"httpx.codes".msg = "Use http.HTTPStatus instead."
